name: Deploy Crossbot to Production

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: deploy-pipeline


jobs:
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    environment: prod

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Get short SHA
        id: getsha
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Authenticate with Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY_JSON }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - uses: RafikFarhad/push-to-gcr-github-action@v5-beta
        with:
          registry: gcr.io
          project_id: crossbot-381014
          image_name: crossbot
          image_tag: ${{ steps.getsha.outputs.SHA_SHORT }}
          dockerfile: ./Dockerfile
          context: .
      - id: deploy
        name: Deploy new cloud run revision
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: crossbot
          image: "gcr.io/crossbot-381014/crossbot:${{ steps.getsha.outputs.SHA_SHORT }}"
          tag: "sha-${{ steps.getsha.outputs.SHA_SHORT }}"
          env_vars: |
            DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
            DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
      - id: update-traffic
        name: Update traffic to new instance
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: crossbot
          tag_traffic: 'sha-${{ steps.getsha.outputs.SHA_SHORT }}=100' # Full traffic to the new instance
      - name: 'Clean up old images'
        run: 'gcloud container images list-tags gcr.io/crossbot-381014/crossbot --format="get(digest)" --filter="NOT tags:${{ steps.getsha.outputs.SHA_SHORT }}" > tags && while read p; do gcloud container images delete "gcr.io/crossbot-381014/crossbot@$p" --force-delete-tags; done < tags'
      - name: 'Curl service'
        run: 'curl "${{ steps.deploy.outputs.url }}"'
